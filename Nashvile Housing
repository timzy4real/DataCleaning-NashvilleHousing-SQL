```SLQ

--All Records 
SELECT *
FROM Nashville_Housing

-------------------------------------------------------------------------------------------------

--Standardizing Date Format
SELECT SaleDate, CONVERT(DATE, SaleDate)
FROM Nashville_Housing

UPDATE Nashville_Housing
SET SaleDate = CONVERT(DATE, SaleDate)


--This Worked
ALTER TABLE Nashville_Housing
ADD SaleDateConverted DATE;

UPDATE Nashville_Housing
SET SaleDateConverted = CONVERT(DATE, SaleDate)

------------------------------------------------------------------------------------------------------
--Pupulate Property Address Data
SELECT *
FROM Nashville_Housing
WHERE PropertyAddress Is NUll 
--ORDER BY UniqueID

SELECT a.ParcelID, a.PropertyAddress, b.parcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress) 
FROM Nashville_Housing a
Join Nashville_Housing b
	ON a.ParcelID = b.ParcelID
	AND a.UniqueID != b.UniqueID 
WHERE a.PropertyAddress IS NULL


UPDATE a --using the full aliase here may give an error
SET PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM Nashville_Housing a
Join Nashville_Housing b
	ON a.ParcelID = b.ParcelID
	AND a.UniqueID != b.UniqueID 
WHERE a.PropertyAddress IS NULL
----------------------------------------------------------------------------------------------------------------------------

--Breaking out Address into Individual Columns (Address, City, State)
SELECT PropertyAddress
FROM Nashville_Housing;

SELECT 
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1) AS Address, --make sure there are no spaces in the ','
SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1, LEN(Propertyaddress)) AS Address
FROM Nashville_Housing

--Update the split address to the table
ALTER TABLE Nashville_Housing
ADD PropertySplitAddress NVARCHAR(255);

UPDATE Nashville_Housing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1)

ALTER TABLE Nashville_Housing
ADD PropertySplitCity NVARCHAR(255);

UPDATE Nashville_Housing
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1, LEN(Propertyaddress))

SELECT *
FROM Nashville_Housing
------------------------------------------------------------------------------------------------------------------------------------------
--Another way of Breaking out Addresses into Different Columns (Much Simplier)
SELECT 
PARSENAME(REPLACE(OwnerAddress, ',','.') , 3),
PARSENAME(REPLACE(OwnerAddress, ',','.') , 2),
PARSENAME(REPLACE(OwnerAddress, ',','.') , 1)
FROM Nashville_Housing

--Update the split address to the table

ALTER TABLE Nashville_Housing
ADD OwnerSplitAddress NVARCHAR(255);

UPDATE Nashville_Housing
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',','.') , 3)

ALTER TABLE Nashville_Housing
ADD OwnerSplitCity NVARCHAR(255);

UPDATE Nashville_Housing
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',','.') , 2)

ALTER TABLE Nashville_Housing
ADD OwnerSplitState NVARCHAR(255);

UPDATE Nashville_Housing
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',','.') , 1)

SELECT *
FROM Nashville_Housing
-----------------------------------------------------------------------------------------------------------------
--Change 0 and 1 to 'Yes' or 'No' in the SoldAsVacant Field
--While working on the above I encountered a challenge, the column "SoldAsVacant" was stored as a BIT, I couldn't convert 1 to yes and 0 to No. 
--I had to change the DATA TYPE from BIT TO CHAR using the codes below. The new Column is SoldAsNewVacant.

SELECT DISTINCT (SoldAsNewVacant), COUNT(SoldAsNewVacant)
FROM Nashville_Housing
GROUP BY SoldAsNewVacant
ORDER BY 2;


SELECT CONVERT(CHAR(3), SoldAsVacant) AS SoldAsNewVacant
FROM Nashville_Housing;


ALTER TABLE Nashville_Housing
ADD SoldAsNewVacant CHAR(3);

UPDATE Nashville_Housing
SET SoldAsNewVacant = CONVERT(CHAR(3), SoldAsVacant);


SELECT SoldAsNewVacant, 
CASE
	WHEN SoldAsNewVacant = 1 THEN 'YES'
	WHEN SoldAsNewVacant = 0 THEN 'N0'
	ELSE SoldAsNewVacant
END
FROM Nashville_Housing
ORDER BY 1 DESC;


UPDATE Nashville_Housing
SET SoldAsNewVacant = CASE
							WHEN SoldAsNewVacant = 1 THEN 'YES'
							WHEN SoldAsNewVacant = 0 THEN 'NO'
							ELSE SoldAsNewVacant
					  END;
-----------------------------------------------------------------------------------------------------------------
--Removing Duplicates
WITH RowNumCTE AS
(
	SELECT *,
	ROW_NUMBER() OVER(PARTITION BY ParcelID, PropertyAddress, SalePrice, SaleDate, LegalReference ORDER BY UniqueID) AS Row_Num
	FROM Nashville_Housing
	--ORDER BY Row_Num
)
SELECT * --Change SELECT * to DELETE to Remove Duplicates, You can as well use Temp Table Idea
FROM RowNumCTE
WHERE Row_Num > 1
ORDER BY PropertyAddress
--------------------------------------------------------------------------------------------------------------------------------------------
--Deleting Unused Column
--NOTE: Do not delete the raw data in your Data Base as it's best practiced
SELECT *
FROM Nashville_Housing

ALTER TABLE Nashville_Housing
DROP COLUMN PropertyAddress, SaleDate, OwnerAddress, TAxDistrict, SoldAsVacant
